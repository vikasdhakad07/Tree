Method 01:Binary Tree Inorder Traversal


class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
       List<Integer> li=new ArrayList<>();
       inorder(root, li);
       return li;
    }

public void inorder(TreeNode root, List<Integer> li){
     if(root==null){
            return;
        }

       
        inorder(root.left, li);
         li.add(root.val);
        inorder(root.right, li);
}
}



Method 02: Binary Tree Inorder Traversal


class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder=new ArrayList<>();
        Stack<TreeNode> st=new Stack<>();
        TreeNode node=root;
        while(true){
              if(node!=null){
                  st.push(node);
                  node=node.left;
              }
              else{
                  if(st.isEmpty()){
                      break;
                  }
                  node=st.pop();
                  inorder.add(node.val);
                  node=node.right;
              }
        }
        return inorder;
    }
}
